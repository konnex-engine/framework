/**
* Konnex Addresses API
* An API that allows for creating, reading, updating and deleting of Konnex Object Address data.
*
* OpenAPI spec version: 1.0.0
* Contact: info@konnex-engine.io
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Address.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Address::Address()
{
    m_Status = "";
    m_StatusIsSet = false;
    m_ResidentFrom = "";
    m_ResidentFromIsSet = false;
    m_Href = "";
    m_HrefIsSet = false;
    m_ResidencyStatus = "";
    m_ResidencyStatusIsSet = false;
    m_Type = "";
    m_TypeIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_IsDefault = false;
    m_IsDefaultIsSet = false;
    
}

Address::~Address()
{
}

void Address::validate()
{
    // TODO: implement validation
}

nlohmann::json Address::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_StatusIsSet)
    {
        val["status"] = ModelBase::toJson(m_Status);
    }
    if(m_ResidentFromIsSet)
    {
        val["residentFrom"] = ModelBase::toJson(m_ResidentFrom);
    }
    if(m_HrefIsSet)
    {
        val["href"] = ModelBase::toJson(m_Href);
    }
    if(m_ResidencyStatusIsSet)
    {
        val["residencyStatus"] = ModelBase::toJson(m_ResidencyStatus);
    }
    val["address"] = ModelBase::toJson(m_Address);
    if(m_TypeIsSet)
    {
        val["type"] = ModelBase::toJson(m_Type);
    }
    if(m_IdIsSet)
    {
        val["id"] = m_Id;
    }
    if(m_IsDefaultIsSet)
    {
        val["isDefault"] = m_IsDefault;
    }
    

    return val;
}

void Address::fromJson(const nlohmann::json& val)
{
    if(val.find("status") != val.end())
    {
        setStatus(val.at("status"));
    }
    if(val.find("residentFrom") != val.end())
    {
        setResidentFrom(val.at("residentFrom"));
        
    }
    if(val.find("href") != val.end())
    {
        setHref(val.at("href"));
    }
    if(val.find("residencyStatus") != val.end())
    {
        setResidencyStatus(val.at("residencyStatus"));
    }
    if(val.find("type") != val.end())
    {
        setType(val.at("type"));
    }
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("isDefault") != val.end())
    {
        setIsDefault(val.at("isDefault"));
    }
    
}


std::string Address::getStatus() const
{
    return m_Status;
}
void Address::setStatus(std::string const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Address::statusIsSet() const
{
    return m_StatusIsSet;
}
void Address::unsetStatus()
{
    m_StatusIsSet = false;
}
std::string Address::getResidentFrom() const
{
    return m_ResidentFrom;
}
void Address::setResidentFrom(std::string const& value)
{
    m_ResidentFrom = value;
    m_ResidentFromIsSet = true;
}
bool Address::residentFromIsSet() const
{
    return m_ResidentFromIsSet;
}
void Address::unsetResidentFrom()
{
    m_ResidentFromIsSet = false;
}
std::string Address::getHref() const
{
    return m_Href;
}
void Address::setHref(std::string const& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}
bool Address::hrefIsSet() const
{
    return m_HrefIsSet;
}
void Address::unsetHref()
{
    m_HrefIsSet = false;
}
std::string Address::getResidencyStatus() const
{
    return m_ResidencyStatus;
}
void Address::setResidencyStatus(std::string const& value)
{
    m_ResidencyStatus = value;
    m_ResidencyStatusIsSet = true;
}
bool Address::residencyStatusIsSet() const
{
    return m_ResidencyStatusIsSet;
}
void Address::unsetResidencyStatus()
{
    m_ResidencyStatusIsSet = false;
}
AddressObject Address::getAddress() const
{
    return m_Address;
}
void Address::setAddress(AddressObject const& value)
{
    m_Address = value;
    
}
std::string Address::getType() const
{
    return m_Type;
}
void Address::setType(std::string const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool Address::typeIsSet() const
{
    return m_TypeIsSet;
}
void Address::unsetType()
{
    m_TypeIsSet = false;
}
int32_t Address::getId() const
{
    return m_Id;
}
void Address::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Address::idIsSet() const
{
    return m_IdIsSet;
}
void Address::unsetId()
{
    m_IdIsSet = false;
}
bool Address::isIsDefault() const
{
    return m_IsDefault;
}
void Address::setIsDefault(bool const value)
{
    m_IsDefault = value;
    m_IsDefaultIsSet = true;
}
bool Address::isDefaultIsSet() const
{
    return m_IsDefaultIsSet;
}
void Address::unsetIsDefault()
{
    m_IsDefaultIsSet = false;
}

}
}
}
}

