/**
* Konnex Addresses API
* An API that allows for creating, reading, updating and deleting of Konnex Object Address data.
*
* OpenAPI spec version: 1.0.0
* Contact: info@konnex-engine.io
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Address.h
 *
 * Data model containing a single Address.
 */

#ifndef Address_H_
#define Address_H_


#include "ModelBase.h"

#include <string>
#include "AddressObject.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data model containing a single Address.
/// </summary>
class  Address
    : public ModelBase
{
public:
    Address();
    virtual ~Address();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// Address members

    /// <summary>
    /// 
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    std::string getResidentFrom() const;
    void setResidentFrom(std::string const& value);
    bool residentFromIsSet() const;
    void unsetResidentFrom();
    /// <summary>
    /// 
    /// </summary>
    std::string getHref() const;
    void setHref(std::string const& value);
    bool hrefIsSet() const;
    void unsetHref();
    /// <summary>
    /// 
    /// </summary>
    std::string getResidencyStatus() const;
    void setResidencyStatus(std::string const& value);
    bool residencyStatusIsSet() const;
    void unsetResidencyStatus();
    /// <summary>
    /// 
    /// </summary>
    AddressObject getAddress() const;
    void setAddress(AddressObject const& value);
        /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// Auto-generated if left blank
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    bool isIsDefault() const;
    void setIsDefault(bool const value);
    bool isDefaultIsSet() const;
    void unsetIsDefault();

protected:
    std::string m_Status;
    bool m_StatusIsSet;
    std::string m_ResidentFrom;
    bool m_ResidentFromIsSet;
    std::string m_Href;
    bool m_HrefIsSet;
    std::string m_ResidencyStatus;
    bool m_ResidencyStatusIsSet;
    AddressObject m_Address;

    std::string m_Type;
    bool m_TypeIsSet;
    int32_t m_Id;
    bool m_IdIsSet;
    bool m_IsDefault;
    bool m_IsDefaultIsSet;
};

}
}
}
}

#endif /* Address_H_ */
