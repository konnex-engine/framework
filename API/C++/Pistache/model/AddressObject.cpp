/**
* Konnex Addresses API
* An API that allows for creating, reading, updating and deleting of Konnex Object Address data.
*
* OpenAPI spec version: 1.0.0
* Contact: info@konnex-engine.io
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AddressObject.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

AddressObject::AddressObject()
{
    m_Locality = "";
    m_LocalityIsSet = false;
    m_CountryIsSet = false;
    m_Line4 = "";
    m_Line4IsSet = false;
    m_Line3 = "";
    m_Line3IsSet = false;
    m_Line2 = "";
    m_Line2IsSet = false;
    m_Line1 = "";
    m_CountyIsSet = false;
    m_PostalCode = "";
    m_PostalCodeIsSet = false;
    
}

AddressObject::~AddressObject()
{
}

void AddressObject::validate()
{
    // TODO: implement validation
}

nlohmann::json AddressObject::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_LocalityIsSet)
    {
        val["locality"] = ModelBase::toJson(m_Locality);
    }
    if(m_CountryIsSet)
    {
        val["country"] = ModelBase::toJson(m_Country);
    }
    if(m_Line4IsSet)
    {
        val["line4"] = ModelBase::toJson(m_Line4);
    }
    if(m_Line3IsSet)
    {
        val["line3"] = ModelBase::toJson(m_Line3);
    }
    if(m_Line2IsSet)
    {
        val["line2"] = ModelBase::toJson(m_Line2);
    }
    val["line1"] = ModelBase::toJson(m_Line1);
    if(m_CountyIsSet)
    {
        val["county"] = ModelBase::toJson(m_County);
    }
    if(m_PostalCodeIsSet)
    {
        val["postalCode"] = ModelBase::toJson(m_PostalCode);
    }
    

    return val;
}

void AddressObject::fromJson(const nlohmann::json& val)
{
    if(val.find("locality") != val.end())
    {
        setLocality(val.at("locality"));
    }
    if(val.find("country") != val.end())
    {
        if(!val["country"].is_null())
        {
            CountryObject newItem;
            newItem.fromJson(val["country"]);
            setCountry( newItem );
        }
        
    }
    if(val.find("line4") != val.end())
    {
        setLine4(val.at("line4"));
    }
    if(val.find("line3") != val.end())
    {
        setLine3(val.at("line3"));
    }
    if(val.find("line2") != val.end())
    {
        setLine2(val.at("line2"));
    }
    setLine1(val.at("line1"));
    if(val.find("county") != val.end())
    {
        if(!val["county"].is_null())
        {
            CountyObject newItem;
            newItem.fromJson(val["county"]);
            setCounty( newItem );
        }
        
    }
    if(val.find("postalCode") != val.end())
    {
        setPostalCode(val.at("postalCode"));
    }
    
}


std::string AddressObject::getLocality() const
{
    return m_Locality;
}
void AddressObject::setLocality(std::string const& value)
{
    m_Locality = value;
    m_LocalityIsSet = true;
}
bool AddressObject::localityIsSet() const
{
    return m_LocalityIsSet;
}
void AddressObject::unsetLocality()
{
    m_LocalityIsSet = false;
}
CountryObject AddressObject::getCountry() const
{
    return m_Country;
}
void AddressObject::setCountry(CountryObject const& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool AddressObject::countryIsSet() const
{
    return m_CountryIsSet;
}
void AddressObject::unsetCountry()
{
    m_CountryIsSet = false;
}
std::string AddressObject::getLine4() const
{
    return m_Line4;
}
void AddressObject::setLine4(std::string const& value)
{
    m_Line4 = value;
    m_Line4IsSet = true;
}
bool AddressObject::line4IsSet() const
{
    return m_Line4IsSet;
}
void AddressObject::unsetLine4()
{
    m_Line4IsSet = false;
}
std::string AddressObject::getLine3() const
{
    return m_Line3;
}
void AddressObject::setLine3(std::string const& value)
{
    m_Line3 = value;
    m_Line3IsSet = true;
}
bool AddressObject::line3IsSet() const
{
    return m_Line3IsSet;
}
void AddressObject::unsetLine3()
{
    m_Line3IsSet = false;
}
std::string AddressObject::getLine2() const
{
    return m_Line2;
}
void AddressObject::setLine2(std::string const& value)
{
    m_Line2 = value;
    m_Line2IsSet = true;
}
bool AddressObject::line2IsSet() const
{
    return m_Line2IsSet;
}
void AddressObject::unsetLine2()
{
    m_Line2IsSet = false;
}
std::string AddressObject::getLine1() const
{
    return m_Line1;
}
void AddressObject::setLine1(std::string const& value)
{
    m_Line1 = value;
    
}
CountyObject AddressObject::getCounty() const
{
    return m_County;
}
void AddressObject::setCounty(CountyObject const& value)
{
    m_County = value;
    m_CountyIsSet = true;
}
bool AddressObject::countyIsSet() const
{
    return m_CountyIsSet;
}
void AddressObject::unsetCounty()
{
    m_CountyIsSet = false;
}
std::string AddressObject::getPostalCode() const
{
    return m_PostalCode;
}
void AddressObject::setPostalCode(std::string const& value)
{
    m_PostalCode = value;
    m_PostalCodeIsSet = true;
}
bool AddressObject::postalCodeIsSet() const
{
    return m_PostalCodeIsSet;
}
void AddressObject::unsetPostalCode()
{
    m_PostalCodeIsSet = false;
}

}
}
}
}

