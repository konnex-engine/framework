/**
* Konnex Addresses API
* An API that allows for creating, reading, updating and deleting of Konnex Object Address data.
*
* OpenAPI spec version: 1.0.0
* Contact: info@konnex-engine.io
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * AddressObject.h
 *
 * 
 */

#ifndef AddressObject_H_
#define AddressObject_H_


#include "ModelBase.h"

#include "CountyObject.h"
#include "CountryObject.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AddressObject
    : public ModelBase
{
public:
    AddressObject();
    virtual ~AddressObject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// AddressObject members

    /// <summary>
    /// 
    /// </summary>
    std::string getLocality() const;
    void setLocality(std::string const& value);
    bool localityIsSet() const;
    void unsetLocality();
    /// <summary>
    /// 
    /// </summary>
    CountryObject getCountry() const;
    void setCountry(CountryObject const& value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// 
    /// </summary>
    std::string getLine4() const;
    void setLine4(std::string const& value);
    bool line4IsSet() const;
    void unsetLine4();
    /// <summary>
    /// 
    /// </summary>
    std::string getLine3() const;
    void setLine3(std::string const& value);
    bool line3IsSet() const;
    void unsetLine3();
    /// <summary>
    /// 
    /// </summary>
    std::string getLine2() const;
    void setLine2(std::string const& value);
    bool line2IsSet() const;
    void unsetLine2();
    /// <summary>
    /// 
    /// </summary>
    std::string getLine1() const;
    void setLine1(std::string const& value);
        /// <summary>
    /// 
    /// </summary>
    CountyObject getCounty() const;
    void setCounty(CountyObject const& value);
    bool countyIsSet() const;
    void unsetCounty();
    /// <summary>
    /// 
    /// </summary>
    std::string getPostalCode() const;
    void setPostalCode(std::string const& value);
    bool postalCodeIsSet() const;
    void unsetPostalCode();

protected:
    std::string m_Locality;
    bool m_LocalityIsSet;
    CountryObject m_Country;
    bool m_CountryIsSet;
    std::string m_Line4;
    bool m_Line4IsSet;
    std::string m_Line3;
    bool m_Line3IsSet;
    std::string m_Line2;
    bool m_Line2IsSet;
    std::string m_Line1;

    CountyObject m_County;
    bool m_CountyIsSet;
    std::string m_PostalCode;
    bool m_PostalCodeIsSet;
};

}
}
}
}

#endif /* AddressObject_H_ */
