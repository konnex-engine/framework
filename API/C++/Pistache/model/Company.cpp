/**
* Konnex Company API
* An API that allows for creating, reading, updating and deleting of Konnex User Company data.
*
* OpenAPI spec version: 1.0.0
* Contact: info@konnex-engine.io
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Company.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

Company::Company()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_NameIsSet = false;
    m_Is_limited = false;
    m_Is_limitedIsSet = false;
    m_Registration_number = "";
    m_Registration_numberIsSet = false;
    m_Legal_status = "";
    m_Legal_statusIsSet = false;
    m_LinksIsSet = false;
    m_Admin_userID = 0;
    m_Admin_userIDIsSet = false;
    
}

Company::~Company()
{
}

void Company::validate()
{
    // TODO: implement validation
}

nlohmann::json Company::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_IdIsSet)
    {
        val["id"] = m_Id;
    }
    if(m_NameIsSet)
    {
        val["name"] = ModelBase::toJson(m_Name);
    }
    if(m_Is_limitedIsSet)
    {
        val["is limited"] = m_Is_limited;
    }
    if(m_Registration_numberIsSet)
    {
        val["registration number"] = ModelBase::toJson(m_Registration_number);
    }
    if(m_Legal_statusIsSet)
    {
        val["legal status"] = ModelBase::toJson(m_Legal_status);
    }
    if(m_LinksIsSet)
    {
        val["links"] = ModelBase::toJson(m_Links);
    }
    if(m_Admin_userIDIsSet)
    {
        val["admin userID"] = m_Admin_userID;
    }
    

    return val;
}

void Company::fromJson(const nlohmann::json& val)
{
    if(val.find("id") != val.end())
    {
        setId(val.at("id"));
    }
    if(val.find("name") != val.end())
    {
        if(!val["name"].is_null())
        {
            CompanyName newItem;
            newItem.fromJson(val["name"]);
            setName( newItem );
        }
        
    }
    if(val.find("is limited") != val.end())
    {
        setIsLimited(val.at("is limited"));
    }
    if(val.find("registration number") != val.end())
    {
        setRegistrationNumber(val.at("registration number"));
    }
    if(val.find("legal status") != val.end())
    {
        setLegalStatus(val.at("legal status"));
    }
    if(val.find("links") != val.end())
    {
        if(!val["links"].is_null())
        {
            Links newItem;
            newItem.fromJson(val["links"]);
            setLinks( newItem );
        }
        
    }
    if(val.find("admin userID") != val.end())
    {
        setAdminUserID(val.at("admin userID"));
    }
    
}


int32_t Company::getId() const
{
    return m_Id;
}
void Company::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Company::idIsSet() const
{
    return m_IdIsSet;
}
void Company::unsetId()
{
    m_IdIsSet = false;
}
CompanyName Company::getName() const
{
    return m_Name;
}
void Company::setName(CompanyName const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Company::nameIsSet() const
{
    return m_NameIsSet;
}
void Company::unsetName()
{
    m_NameIsSet = false;
}
bool Company::isIsLimited() const
{
    return m_Is_limited;
}
void Company::setIsLimited(bool const value)
{
    m_Is_limited = value;
    m_Is_limitedIsSet = true;
}
bool Company::isLimitedIsSet() const
{
    return m_Is_limitedIsSet;
}
void Company::unsetIs_limited()
{
    m_Is_limitedIsSet = false;
}
std::string Company::getRegistrationNumber() const
{
    return m_Registration_number;
}
void Company::setRegistrationNumber(std::string const& value)
{
    m_Registration_number = value;
    m_Registration_numberIsSet = true;
}
bool Company::registrationNumberIsSet() const
{
    return m_Registration_numberIsSet;
}
void Company::unsetRegistration_number()
{
    m_Registration_numberIsSet = false;
}
std::string Company::getLegalStatus() const
{
    return m_Legal_status;
}
void Company::setLegalStatus(std::string const& value)
{
    m_Legal_status = value;
    m_Legal_statusIsSet = true;
}
bool Company::legalStatusIsSet() const
{
    return m_Legal_statusIsSet;
}
void Company::unsetLegal_status()
{
    m_Legal_statusIsSet = false;
}
Links Company::getLinks() const
{
    return m_Links;
}
void Company::setLinks(Links const& value)
{
    m_Links = value;
    m_LinksIsSet = true;
}
bool Company::linksIsSet() const
{
    return m_LinksIsSet;
}
void Company::unsetLinks()
{
    m_LinksIsSet = false;
}
int32_t Company::getAdminUserID() const
{
    return m_Admin_userID;
}
void Company::setAdminUserID(int32_t const value)
{
    m_Admin_userID = value;
    m_Admin_userIDIsSet = true;
}
bool Company::adminUserIDIsSet() const
{
    return m_Admin_userIDIsSet;
}
void Company::unsetAdmin_userID()
{
    m_Admin_userIDIsSet = false;
}

}
}
}
}

