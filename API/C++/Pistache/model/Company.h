/**
* Konnex Company API
* An API that allows for creating, reading, updating and deleting of Konnex User Company data.
*
* OpenAPI spec version: 1.0.0
* Contact: info@konnex-engine.io
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Company.h
 *
 * Data model containing Company info.
 */

#ifndef Company_H_
#define Company_H_


#include "ModelBase.h"

#include "CompanyName.h"
#include "Links.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Data model containing Company info.
/// </summary>
class  Company
    : public ModelBase
{
public:
    Company();
    virtual ~Company();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// Company members

    /// <summary>
    /// The company ID
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    CompanyName getName() const;
    void setName(CompanyName const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    bool isIsLimited() const;
    void setIsLimited(bool const value);
    bool isLimitedIsSet() const;
    void unsetIs_limited();
    /// <summary>
    /// 
    /// </summary>
    std::string getRegistrationNumber() const;
    void setRegistrationNumber(std::string const& value);
    bool registrationNumberIsSet() const;
    void unsetRegistration_number();
    /// <summary>
    /// The legal status of the company. MUST be \&quot;Private Limited by Shares\&quot;, \&quot;Private Limited by Guarantee\&quot;, \&quot;Public Limited Company\&quot;, \&quot;\&quot; 
    /// </summary>
    std::string getLegalStatus() const;
    void setLegalStatus(std::string const& value);
    bool legalStatusIsSet() const;
    void unsetLegal_status();
    /// <summary>
    /// 
    /// </summary>
    Links getLinks() const;
    void setLinks(Links const& value);
    bool linksIsSet() const;
    void unsetLinks();
    /// <summary>
    /// The user ID of the current Super Administrator
    /// </summary>
    int32_t getAdminUserID() const;
    void setAdminUserID(int32_t const value);
    bool adminUserIDIsSet() const;
    void unsetAdmin_userID();

protected:
    int32_t m_Id;
    bool m_IdIsSet;
    CompanyName m_Name;
    bool m_NameIsSet;
    bool m_Is_limited;
    bool m_Is_limitedIsSet;
    std::string m_Registration_number;
    bool m_Registration_numberIsSet;
    std::string m_Legal_status;
    bool m_Legal_statusIsSet;
    Links m_Links;
    bool m_LinksIsSet;
    int32_t m_Admin_userID;
    bool m_Admin_userIDIsSet;
};

}
}
}
}

#endif /* Company_H_ */
